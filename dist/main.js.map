{"version":3,"sources":["arrow_functions.js","default_parameters.js","rest_parameter.js","spread_parameters.js","template_literals.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["describe('arrow_functions', function () {\n\n    it('should return square value', function () {\n        var square = x => x * x;\n        expect(square(3)).toEqual(9);\n    });\n\n    it('should multiply parameters', function () {\n        var multiply = (x, y) => x * y;\n        expect(multiply(2, 3)).toEqual(6);\n    });\n\n    it('should add parameters', function () {\n        var add = (x, y, z) => {\n            return x + y + z;\n        }\n        expect(add(1, 2, 0)).toEqual(3);\n    });\n\n    it('should double array values', function () {\n        var numbers = [1, 1, 2];\n        var sum = numbers.map(x => x + x);\n        expect(sum).toEqual([2, 2, 4]);\n    });\n\n    it('should return undefined when arrow function is not used', function (done) {\n        this.outerScope = 'outerScope';\n        setTimeout(function () {\n            expect(this.outerScope).toBeUndefined();\n            done();\n        }, 0);\n    });\n\n    it('should return value when arrow function is used', function (done) {\n        this.outerScope = 'outerScope';\n        setTimeout(() => {\n            expect(this.outerScope).toEqual('outerScope');\n            done();\n        }, 0);\n    });\n\n});\n","describe('default_parameters', function () {\n\n    var defaultName = function () {\n        return \"Oli\" + \"bucks\";\n    };\n\n    var getGreeting = function (name = \"Scott\") {\n        return \"Hello, \" + name;\n    };\n\n    var getGreetingWithFunction = function (name = defaultName()) {\n        return \"Hello, \" + name;\n    };\n\n    it('should set a default value', function () {\n        var result = getGreeting();\n        expect(result).toEqual(\"Hello, Scott\");\n    });\n\n    it('should override the default value', function () {\n        var result = getGreeting(\"Oliver\");\n        expect(result).toEqual(\"Hello, Oliver\");\n    });\n\n    it('should take a function as the default value', function () {\n        var result = getGreetingWithFunction();\n        expect(result).toEqual(\"Hello, Olibucks\");\n    });\n\n    it('should override the function default value', function () {\n        var result = getGreetingWithFunction(\"Oliver\");\n        expect(result).toEqual(\"Hello, Oliver\");\n    });\n\n});\n","describe('rest_parameter', function () {\n\n    it('should sum all passed parameters', function () {\n        var sum = function (...args) {\n            var result = 0;\n            for (var arg in args) {\n                result += args[arg];\n            }\n            return result;\n        };\n\n        expect(sum(2, 3, 4)).toEqual(9);\n    });\n\n});\n","describe('spread_parameters', function () {\n\n    it('should spread arguments when calling a function', function () {\n        var f = function (x, y, z) {\n            return x + y + z;\n        };\n\n        var data = [1, 2, 3];\n        var result = f(...data);\n\n        expect(result).toEqual(6);\n    });\n\n    it('should spread into an array', function () {\n        var data = [1, 2, 3];\n        var result = [0, ...data, 4];\n\n        expect(result).toEqual([0, 1, 2, 3 ,4]);\n    });\n\n});\n","describe('template_literals', function () {\n\n    it('should interpolate string', function () {\n        var name = \"world\";\n        var result = `Hello, ${name}`;\n\n        expect(result).toEqual(\"Hello, world\");\n    });\n\n    it('should respond to tagged function', function () {\n        var x = 1;\n        var y = 3;\n        var double_value = function(strings, ...values) {\n            var result = '';\n            for(var i in strings) {\n                result += strings[i] + (values[i] ? (values[i] + values[i]) : '');\n            }\n            return result;\n        };\n\n        var result = double_value `${x} + ${y} is ${x+y}`;\n\n        expect(result).toEqual('2 + 6 is 8');\n\n    });\n\n});\n"],"sourceRoot":"/source/"}